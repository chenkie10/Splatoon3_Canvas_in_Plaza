
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00002194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055bc  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c26  00000000  00000000  00007a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003002  00000000  00000000  0000963e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  0000c640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021c6  00000000  00000000  0000cd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032ff  00000000  00000000  0000eee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  000121e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__ctors_end>
       4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
       8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
       c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      10:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      14:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      18:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      1c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      20:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      24:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      28:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_10>
      2c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      30:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      34:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      38:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      3c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      40:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      44:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      48:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      4c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      50:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      54:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      58:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      5c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      60:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      64:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      68:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      6c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      70:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      74:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      78:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      7c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      80:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      84:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      88:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      8c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      90:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      94:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      98:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      9c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a0:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>

000000ac <ProductString>:
      ac:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
      bc:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
      cc:	45 00 52 00 00 00                                   E.R...

000000d2 <ManufacturerString>:
      d2:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
      e2:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000f0 <LanguageString>:
      f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
      f4:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
     104:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
     114:	00 05 07 05 81 03 40 00 05                          ......@..

0000011d <DeviceDescriptor>:
     11d:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
     12d:	00 01                                               ..

0000012f <JoystickReport>:
     12f:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
     13f:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
     14f:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
     15f:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
     16f:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
     17f:	26 95 08 91 02 c0                                   &.....

00000185 <image_data>:
     185:	00 00 00 00 00 00 00 00 00 00 12 00 00 10 00 00     ................
     195:	00 00 d0 aa f7 ff fd ff ff ff 77 fb ff ff ff fd     ..........w.....
     1a5:	df b6 15 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     1b5:	00 00 55 55 a5 4a 92 aa aa 94 34 f5 6e ab 56 6b     ..UU.J....4.n.Vk
     1c5:	6d db ae ad 6d db b6 b7 b6 6d 1b 00 00 00 00 00     m...m....m......
     1d5:	00 00 00 00 00 00 00 00 00 c0 02 00 10 11 08 00     ................
     1e5:	00 40 eb 5f db fe ff ff bf ff fb d6 fe ff ff fa     .@._............
     1f5:	6f 55 0d 00 00 00 00 00 00 00 00 00 00 00 00 00     oU..............
     205:	00 20 48 92 54 48 a1 24 49 aa ae ea fe b5 6d ad     . H.TH.$I.....m.
     215:	f5 56 df 6f db aa aa af dd 6d 1b 00 00 00 00 00     .V.o.....m......
     225:	00 00 00 00 00 00 00 00 00 18 21 08 0b 02 04 40     ..........!....@
     235:	10 7d 55 db d7 ff ff ff df ff 75 db f6 ff ff fd     .}U.......u.....
     245:	7b db 36 00 00 00 00 00 00 00 00 00 00 00 00 00     {.6.............
     255:	00 46 84 62 a0 90 90 0a d5 cb da b6 7f ab 5a db     .F.b..........Z.
     265:	f6 da ff bf 2d b7 6d b7 ee 55 3d 00 00 00 00 00     ....-.m..U=.....
     275:	00 00 00 00 00 00 00 00 80 02 10 90 0a 04 42 20     ..............B 
     285:	b4 5a 6b fd d5 ff ff f7 bf 7f ad 56 d5 fa fb fd     .Zk........V....
     295:	bb 6b 6b 00 00 00 00 00 00 00 00 00 00 00 00 00     .kk.............
     2a5:	20 48 45 0a 52 52 14 82 ab aa de 6f ff f6 d6 be      HE.RR.....o....
     2b5:	ea d5 ff ff b6 6f df d7 fe de da 00 00 00 00 00     .....o..........
     2c5:	00 00 00 00 00 00 00 00 80 02 80 a4 04 01 81 68     ...............h
     2d5:	6d db 6a dd ef df ff fb 7f ff b6 6d 5b f5 7d ff     m.j........m[.}.
     2e5:	d7 53 f7 01 00 00 00 00 00 00 00 00 00 00 00 00     .S..............
     2f5:	50 90 14 91 28 24 24 52 5b b5 ff f7 bd fd ad ad     P...($$R[.......
     305:	dd b7 ff ff 75 5f d7 ad 7e bf aa 02 00 00 00 00     ....u_..~.......
     315:	00 00 00 00 00 00 00 00 22 42 a0 24 81 80 40 af     ........"B.$..@.
     325:	6a eb aa ff ef b7 ff ff f7 fe 55 d5 af fa fe ff     j.........U.....
     335:	db d5 d6 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     345:	88 28 0d 49 4a 2a aa 6a dd be fd bf 7d ff de 6d     .(.IJ*.j....}..m
     355:	bf 6b ff 7f ed ea 5d d5 7e bf ad 03 00 00 00 00     .k....].~.......
     365:	00 00 00 00 00 00 00 00 14 8a 50 12 00 00 d8 aa     ..........P.....
     375:	aa d5 f6 f6 f7 d5 7b ff ed ff bb db 5f d7 fb ff     ......{....._...
     385:	eb fb ba 0e 00 00 00 00 00 00 00 00 00 00 00 40     ...............@
     395:	a5 24 8b 44 52 49 b7 aa 77 bd dd ff 5f 7f df 57     .$.DRI..w..._..W
     3a5:	7f 6d ef fe b6 5a b7 5b bf ad d7 1e 00 00 00 00     .m...Z.[........
     3b5:	00 00 00 00 00 00 00 00 11 c9 24 09 01 50 55 b5     ..........$..PU.
     3c5:	aa 6b 6b dd fe f7 fd ff eb ff fd b7 ff b6 ed fe     .kk.............
     3d5:	ed ff ad 37 00 00 00 00 00 00 00 00 00 00 00 40     ...7...........@
     3e5:	4a 52 48 52 94 aa ad d6 6f d5 de ff ff bf b7 fd     JRHR....o.......
     3f5:	bf ad b7 6d d5 55 bf b7 bb b6 7f 7d 00 00 00 00     ...m.U.....}....
     405:	00 00 00 00 00 00 00 a0 90 14 25 01 00 75 ab b5     ..........%..u..
     415:	da be b5 ed f6 ef ff 6f fb ff 7e db 6d db ed 7d     .......o..~.m..}
     425:	ef ef aa fe 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
     435:	25 89 48 94 d2 ae 6a ad ba 6b eb bf bf fd ee fe     %.H...j..k......
     445:	af da eb b7 b6 b6 b6 ef 7a bd bf d5 01 00 00 00     ........z.......
     455:	00 00 00 00 00 00 00 a8 48 22 25 01 a8 55 55 6b     ........H"%..UUk
     465:	6b db fe ea ed ff fb 77 fb 7f bf 6e db ad dd be     k......w...n....
     475:	ef f7 6d ff 03 00 00 00 00 00 00 00 00 00 00 10     ..m.............
     485:	11 91 10 52 69 b5 ad da d6 b6 b5 5f ff ee bf fd     ...Ri......_....
     495:	df ed ed df 76 bb f6 f5 ba 5d bf 5a 07 00 00 00     ....v....].Z....
     4a5:	00 00 00 00 00 00 00 54 22 24 4a 00 56 ab da 56     .......T"$J.V..V
     4b5:	5d ef ff ff b6 7f ff 6f fb bf ff 6d db b6 5d df     ]......o...m..].
     4c5:	ef ff d5 f5 0f 00 00 00 00 00 00 00 00 00 00 84     ................
     4d5:	48 49 81 aa da 5a b5 b5 f5 75 db ed fd db ef fe     HI...Z...u......
     4e5:	bf 6b 7d df b6 ed f6 f7 ba aa b7 7e 0f 00 00 00     .k}........~....
     4f5:	00 00 00 00 00 00 00 22 22 22 2a c4 b5 d6 56 ad     ......."""*...V.
     505:	56 ff 7f 7f df ff fd d7 ee de f6 bf 6d fb df be     V...........m...
     515:	f7 ff aa d5 1d 00 00 00 00 00 00 00 00 00 00 89     ................
     525:	88 88 40 31 ab aa ed ea ff df ee db f5 76 af fd     ..@1.........v..
     535:	fb ff df fb db b6 7d fb 5d ad 77 fb 1f 00 00 00     ......}.].w.....
     545:	00 00 00 00 00 00 00 11 11 52 2a d2 ae 5a 5b 77     .........R*..Z[w
     555:	f7 f6 ff b6 ee ff ff 7f ff bb f7 ee b6 ed d7 6f     ...............o
     565:	ef 7b ad b6 3e 00 00 00 00 00 00 00 00 00 80 a4     .{..>...........
     575:	a4 08 90 b4 d5 f6 ee fd bd ff ed 6d 5b db b5 ed     ...........m[...
     585:	b7 fe fd ff 6d 7b ff da 5b ef db fd 0f 00 00 00     ....m{..[.......
     595:	00 00 00 00 00 00 20 10 0a 45 45 aa 55 af ff df     ...... ..EE.U...
     5a5:	ff db bf db b6 7f ff 77 ff ef bf bb b7 dd ed 77     .......w.......w
     5b5:	ff ba 6f ab 1d 00 00 00 00 00 00 00 00 00 20 a5     ..o........... .
     5c5:	20 09 10 ed aa fd bb 75 b7 7f fb 6f 6b ed 6f fd      ......u...ok.o.
     5d5:	d5 be fb ff ff f7 bf ea fd ff fa ff 0f 00 00 00     ................
     5e5:	00 00 00 00 00 00 10 12 4d 22 85 5a 75 db ee ff     ........M".Zu...
     5f5:	fd ee 7f bb dd fb fd 6f ff eb de 6e db be aa 5d     .......o...n...]
     605:	b7 ed 5f 6d 07 00 00 00 00 00 00 00 00 00 48 04     .._m..........H.
     615:	92 44 48 b5 aa f7 7f db ef fb ed df b6 b6 b7 fb     .DH.............
     625:	bb ff ff ff ff f7 6d eb fd bf f6 ff 03 00 00 00     ......m.........
     635:	00 00 00 00 00 00 80 a2 aa 12 25 ad ea bb ed 7f     ..........%.....
     645:	7b bf ff b6 6d fd fe de ee 5a 7b db fe dd da 5a     {...m....Z{....Z
     655:	ef ea 7f fb 01 00 00 00 00 00 00 00 00 00 14 49     ...............I
     665:	45 a4 50 57 fd f7 bf ed ff ff ef 6b db d7 ab f7     E.PW.......k....
     675:	bf ff ef ff 5b ff bf d6 fb 7f db 3f 00 00 00 00     ....[......?....
     685:	00 00 00 00 00 00 a2 a0 a8 12 25 55 a5 56 f5 7f     ..........%U.V..
     695:	ef 76 bd df 7e 7f ff bd fa ed 7e ab fe 6f d5 b5     .v..~.....~..o..
     6a5:	dd f6 ef 1f 00 00 00 00 00 00 00 00 00 00 44 24     ..............D$
     6b5:	25 29 92 aa 5a ef bf ed fb df ef ed f5 ed dd ef     %)..Z...........
     6c5:	af bb df ff ef fb ff 6b f7 5d fd 07 00 00 00 00     .......k.]......
     6d5:	00 00 00 00 00 00 29 58 4a 4a a9 92 ef de ef ff     ......)XJJ......
     6e5:	be fd fd bf ae bf 77 7b 75 ed fb 7a 7b bf dd de     ......w{u..z{...
     6f5:	de fb bf 01 00 00 00 00 00 00 00 00 00 00 13 89     ................
     705:	a8 92 a4 6a fd 5f fb ee ef ef b7 6a fb ea fd dd     ...j._.....j....
     715:	af 5b af df ff f7 f7 55 77 ed 0f 00 00 00 00 00     .[.....Uw.......
     725:	00 00 00 00 00 80 05 2a 4b 2a 6a ad 55 b5 bf bb     .......*K*j.U...
     735:	fd 7b ff dd d7 7f af 77 7b fd fd ff 6d bf be fb     .{.....w{...m...
     745:	dd ff 00 00 00 00 00 00 00 00 00 00 00 40 d0 a6     .............@..
     755:	a4 92 5a eb fe ff f6 ff 77 ff 5b b7 7d db fb fe     ..Z.....w.[.}...
     765:	ef 6f b7 6d ff ed f7 d5 be 0f 00 00 00 00 00 00     .o.m............
     775:	00 00 00 00 00 60 97 48 4a 4a 75 55 dd ad df b6     .....`.HJJuU....
     785:	de ef fe ed de ff be b7 7d fb ff ff b7 ff dd fe     ........}.......
     795:	eb 0b 00 00 00 00 00 00 00 00 00 00 00 a0 20 92     .............. .
     7a5:	a8 14 5b 6d f7 ff fd fd fb be ef bf f7 b6 f7 fd     ..[m............
     7b5:	df bf 75 dd fd bd f7 b5 de 16 00 00 00 00 00 00     ..u.............
     7c5:	00 00 00 00 00 50 49 a1 4a a5 de 2a bf f6 b7 af     .....PI.J..*....
     7d5:	ef fb 7b fb bd ff bd df f7 f7 df f7 ef f7 7d fb     ..{...........}.
     7e5:	bb 0f 00 00 00 00 00 00 00 00 00 00 00 28 52 44     .............(RD
     7f5:	95 84 aa 9a ed df fe fb be df ff 6f ef d5 ef 7b     ...........o...{
     805:	7f dd 46 7f 7f bf df 5e d7 1a 00 00 00 00 00 00     ..F....^........
     815:	00 00 00 00 00 54 29 55 22 a9 ad b5 79 fb db fe     .....T)U"...y...
     825:	fb f6 56 fd 7b 7f 7b ef dd ff 80 dd fb ed fb 77     ..V.{.{........w
     835:	bd 1d 00 00 00 00 00 00 00 00 00 00 00 24 92 92     .............$..
     845:	ac 42 6d cd 42 af fe df ef bf ff d7 de f7 df fb     .Bm.B...........
     855:	f7 15 12 f7 d7 fb be dd 56 1b 00 00 00 00 00 00     ........V.......
     865:	00 00 00 00 00 c8 2a a9 92 94 aa ba 94 50 ab 7d     ......*......P.}
     875:	7f eb fb ff f7 dd f6 be 5f 45 40 7e 7d bf ef b7     ........_E@~}...
     885:	ed 3e 00 00 00 00 00 00 00 00 00 00 00 28 49 aa     .>...........(I.
     895:	2a a5 55 bd 20 aa d4 d7 f5 ff de de 7e 7f bf ff     *.U. .......~...
     8a5:	12 00 12 d8 eb fb 7b ff 5a 1b 00 00 00 00 00 00     ......{.Z.......
     8b5:	00 00 00 00 00 50 92 92 52 a9 b6 6f 4d 01 95 fe     .....P..R..oM...
     8c5:	5f dd ff fb b7 eb ed b7 82 94 80 fc 57 df ff d5     _...........W...
     8d5:	f6 3f 00 00 00 00 00 00 00 00 00 00 00 a0 2a 54     .?............*T
     8e5:	4a aa aa 4a 12 aa 52 bd fd 77 6b b7 ee be ff 0d     J..J..R..wk.....
     8f5:	10 00 24 d8 fe fb 6e 7f ab 16 00 00 00 00 00 00     ..$...n.........
     905:	00 00 00 00 00 40 94 a5 90 5a 55 b7 a0 92 14 e8     .....@...ZU.....
     915:	ef ff df dd bd eb 2f 40 84 24 11 fa ab be fb f7     ....../@.$......
     925:	de 3f 00 00 00 00 00 00 00 00 00 00 00 80 20 aa     .?............ .
     935:	d6 ee b6 63 aa 2a 09 81 fa de f6 f7 d7 5f 00 01     ...c.*......._..
     945:	20 00 84 ac ed f7 df de b5 0d 00 00 00 00 00 00      ...............
     955:	00 00 00 00 00 00 85 ca 95 a8 6a b5 6d ff 42 10     ..........j.m.B.
     965:	00 f5 7f 7f 29 00 00 10 01 49 0f fc db de f7 7b     ....)....I.....{
     975:	ef 07 00 00 00 00 00 00 00 00 00 00 00 00 50 31     ..............P1
     985:	b5 56 d5 79 b7 d5 05 04 12 fa dd 5f 42 92 48 00     .V.y......._B.H.
     995:	08 e4 65 d9 f6 3b dc de fb 02 00 00 00 00 00 00     ..e..;..........
     9a5:	00 00 00 00 00 00 20 4d 95 aa ad fa ee be 5f 40     ...... M......_@
     9b5:	80 bc ff 2d 08 00 00 ea fe 7f 2b f8 5f 4f a1 fd     ...-......+._O..
     9c5:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 ae aa     ................
     9d5:	2a b5 aa ac ba eb 3e 12 24 f8 75 07 02 00 f2 bf     *.....>.$.u.....
     9e5:	f7 dd 0d 6e f5 95 0a b2 9a 00 00 00 00 00 00 00     ...n............
     9f5:	00 00 00 00 00 80 a8 aa 52 a8 76 55 d7 7e eb 01     ........R.vU.~..
     a05:	01 6a df 83 40 2a fd d6 bf ff 42 fc ff 2a b1 44     .j..@*....B..*.D
     a15:	2b 02 00 00 00 00 00 00 00 00 00 00 00 a0 ab aa     +...............
     a25:	2a 59 d5 4e be db 7f 43 80 f4 77 10 10 c1 5f 7b     *Y.N...C..w..._{
     a35:	fd 57 10 db be 50 4a 55 f4 15 00 00 00 00 00 00     .W...PJU........
     a45:	00 00 00 00 00 5b 6a 55 09 d5 6a 56 70 77 d5 09     .....[jU..jVpw..
     a55:	14 40 5d 04 49 b4 ed 6f c3 02 01 be 2f 8a 10 a0     .@].I..o..../...
     a65:	4a ff 05 00 00 00 00 00 00 00 00 00 80 aa 55 55     J.............UU
     a75:	52 af bd 9e c4 dd 7f 83 00 11 02 a1 24 f4 bf aa     R...........$...
     a85:	c4 17 44 ea 95 20 85 0a 90 50 7a 00 00 00 00 00     ..D.. ...Pz.....
     a95:	00 00 00 00 68 55 aa 4a 65 b7 2a b5 10 fe ed 10     ....hU.Je.*.....
     aa5:	20 00 20 10 49 df f5 80 ca 45 10 7e 03 0a 22 80      . .I....E.~..".
     ab5:	02 82 50 05 00 00 00 00 00 00 00 00 5d 55 95 54     ..P.........]U.T
     ac5:	71 af b6 9e 05 40 15 41 02 24 09 a5 a0 f5 aa 62     q....@.A.$.....b
     ad5:	e5 13 01 ab 55 40 08 22 28 08 04 29 00 00 00 00     ....U@."(..)....
     ae5:	00 00 00 80 53 55 25 15 68 db 9a 35 29 09 40 0a     ....SU%.h..5).@.
     af5:	08 01 40 08 f1 7e 75 51 6b 05 a4 fd 80 04 82 00     ..@..~uQk.......
     b05:	80 22 21 57 00 00 00 00 00 00 00 70 95 aa 54 0b     ."!W.......p..T.
     b15:	38 af be 16 42 f6 95 54 42 a8 04 a5 d8 4f a2 6d     8...B..TB....O.m
     b25:	f5 a1 80 2b 2a 20 20 24 09 40 08 b8 00 00 00 00     ...+*  $.@......
     b35:	00 00 00 4f aa 24 a9 00 78 57 6d b5 b6 7f 2f 91     ...O.$..xWm.../.
     b45:	00 02 90 10 b8 95 da 5a da 08 4a 1d 01 09 00 01     .......Z..J.....
     b55:	20 09 42 e0 00 00 00 00 00 00 80 51 49 55 2d 00      .B........QIU-.
     b65:	6d 6d b7 ef ea de fb 25 94 90 04 a5 d4 aa b6 85     mm.....%........
     b75:	7a 22 40 43 90 80 24 90 02 20 11 52 02 00 00 00     z"@C..$.. .R....
     b85:	00 00 00 a6 37 55 05 00 bd ae 7b bb df f7 ff af     ....7U....{.....
     b95:	02 02 a0 08 6e 56 55 af 6a 88 12 08 40 22 00 02     ....nVU.j...@"..
     ba5:	a8 0a 84 b0 00 00 00 00 00 00 00 00 00 80 00 80     ................
     bb5:	6e df 5c fd fa 7f bb 5f 91 48 02 25 3a ac ca 4a     n.\...._.H.%:..J
     bc5:	fd 23 00 00 84 00 48 20 01 40 20 44 00 00 00 00     .#....H .@ D....
     bd5:	00 00 00 00 00 10 00 80 77 56 ff d5 57 81 d6 fa     ........wV..W...
     be5:	06 00 a0 80 9a a8 90 5a be 8e 4a 42 50 84 00 02     .......Z..JBP...
     bf5:	24 12 05 11 04 00 00 00 00 00 00 00 00 00 00 f0     $...............
     c05:	5e ad 6e 55 ea 01 2a ad 2f 09 08 80 06 d0 0a 87     ^.nU..*./.......
     c15:	27 39 00 10 20 11 42 48 80 40 50 43 00 00 00 00     '9.. .BH.@PC....
     c25:	00 00 00 00 00 00 00 ac 6b b7 5b db 4a 93 ac 7a     ........k.[.J..z
     c35:	55 40 02 24 22 81 d2 ea 08 40 12 04 0a 80 10 02     U@.$"....@......
     c45:	25 04 22 04 00 00 00 00 00 00 00 00 00 00 00 fe     %.".............
     c55:	7e 6d bf aa 2a 0f 55 52 2c 00 00 80 4a 00 24 b5     ~m..*.UR,...J.$.
     c65:	a2 0a 40 80 50 12 80 10 00 51 54 01 00 00 00 00     ..@.P....QT.....
     c75:	00 00 00 00 00 00 80 ab ab ae 65 5b 55 2c 88 fa     ..........e[U,..
     c85:	f9 08 40 80 a2 2d 40 2d 04 a0 0a 11 80 00 09 40     ..@..-@-.......@
     c95:	12 84 0a 00 00 00 00 00 00 00 00 00 00 00 c0 fe     ................
     ca5:	7e db 5a b5 a5 32 b1 96 86 43 02 12 4f f5 de 4a     ~.Z..2...C..O..J
     cb5:	51 05 40 04 14 24 20 05 c0 b0 02 00 00 00 00 00     Q.@..$ .........
     cc5:	00 00 00 00 00 00 e0 ab d5 b7 d6 56 5a 25 44 a4     ...........VZ%D.
     cd5:	55 aa 94 00 aa ad a9 02 04 50 12 80 48 00 01 90     U........P..H...
     ce5:	b4 16 00 00 00 00 00 00 00 00 00 00 00 00 b0 fe     ................
     cf5:	7e d5 aa aa 22 c8 a0 55 0a da 2b 45 00 12 02 28     ~..."..U..+E...(
     d05:	51 02 00 21 24 49 24 01 4a 00 00 00 00 00 00 00     Q..!$I$.J.......
     d15:	00 00 00 00 00 00 f8 ab f7 5a 6b d5 4a 95 01 aa     .........Zk.J...
     d25:	9a 82 54 09 21 40 a8 80 03 49 95 14 09 00 00 b4     ..T.!@...I......
     d35:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 54 7f     ..............T.
     d45:	5b ab 9a 38 94 20 03 80 ea 54 22 42 88 0a 01 2a     [..8. ...T"B...*
     d55:	54 20 40 42 52 12 91 0a 00 00 00 00 00 00 00 00     T @BR...........
     d65:	00 00 00 00 00 00 f8 ea bf 76 53 8b 22 55 46 20     .........vS."UF 
     d75:	54 00 08 00 00 20 24 01 01 0a 91 00 04 40 40 22     T.... $......@@"
     d85:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 d6 bf     ................
     d95:	d6 aa ac a4 94 84 bf af 9b 92 80 08 49 92 40 48     ............I.@H
     da5:	48 40 24 00 29 09 14 35 00 00 00 00 00 00 00 00     H@$.)..5........
     db5:	00 00 00 00 00 80 bd da ab ad 6a 49 22 d1 d6 fb     ..........jI"...
     dc5:	22 08 12 40 00 00 0a 11 11 09 58 24 52 d0 d3 0a     "..@......X$R...
     dd5:	00 00 00 00 00 00 00 00 00 00 00 00 00 f8 f7 f7     ................
     de5:	6e 55 35 92 54 d2 0b 2d 49 41 00 01 48 52 20 04     nU5.T..-IA..HR .
     df5:	04 22 29 80 14 72 55 35 00 00 00 00 00 00 00 00     .")..rU5........
     e05:	00 00 00 00 00 5c 6d bd 55 95 4a 25 81 e4 54 40     .....\m.U.J%..T@
     e15:	94 08 25 08 01 00 89 a0 a0 00 0c 02 89 48 55 15     ..%..........HU.
     e25:	00 00 00 00 00 00 00 00 00 00 00 00 00 f6 ff 77     ...............w
     e35:	55 ad 15 48 2a 21 81 12 21 42 00 40 90 24 20 02     U..H*!..!B.@.$ .
     e45:	02 94 1a 48 2a 82 aa 1a 00 00 00 00 00 00 00 00     ...H*...........
     e55:	00 00 00 00 00 af 5a ad fa 4a aa 92 54 15 54 48     ......Z..J..T.TH
     e65:	54 10 88 00 04 00 09 48 28 41 18 01 41 a9 6a 15     T......H(A..A.j.
     e75:	00 00 00 00 00 00 00 00 00 00 00 00 80 fd ef b7     ................
     e85:	57 43 a5 22 21 25 21 05 89 02 02 04 80 24 40 02     WC."!%!......$@.
     e95:	00 90 32 40 14 54 95 05 00 00 00 00 00 00 00 00     ..2@.T..........
     ea5:	00 00 00 00 c0 ab bd da ba 46 4a 54 56 82 4a 51     .........FJTV.JQ
     eb5:	50 41 00 21 21 00 09 10 25 25 29 04 a1 52 69 01     PA.!!...%%)..Ri.
     ec5:	00 00 00 00 00 00 00 00 00 00 00 00 60 fd eb ef     ............`...
     ed5:	d7 ca 91 8a a8 00 96 04 05 0a 10 00 00 08 80 00     ................
     ee5:	80 54 72 20 08 ad da 02 00 00 00 00 00 00 00 00     .Tr ............
     ef5:	00 00 00 00 f8 6e bf ba 5a 05 4a 50 15 00 a6 29     .....n..Z.JP...)
     f05:	50 80 84 08 04 41 20 44 48 95 d4 40 82 53 55 01     P....A DH..@.SU.
     f15:	00 00 00 00 00 00 00 00 00 00 00 00 a8 fb ea b7     ................
     f25:	b5 8a 2a 25 10 40 48 83 04 09 00 40 20 00 02 a9     ..*%.@H....@ ...
     f35:	2a 2d a9 13 68 55 d5 00 00 00 00 00 00 00 00 00     *-..hU..........
     f45:	00 00 00 00 fe de bf 6e 0b 00 58 a9 1a 00 92 16     .......n..X.....
     f55:	00 50 55 00 01 08 10 00 42 db 26 8a d2 aa 5a 01     .PU.....B.&...Z.
     f65:	00 00 00 00 00 00 00 00 00 00 00 00 d5 b7 ea dd     ................
     f75:	16 00 a4 ff 16 00 20 45 29 01 00 12 08 81 00 b5     ...... E).......
     f85:	28 20 ed 22 20 55 6d 00 00 00 00 00 00 00 00 00     ( ." Um.........
     f95:	00 00 00 80 7f fd 5f 7b 05 00 04 00 10 00 6a 0c     ......_{......j.
     fa5:	00 44 80 00 40 20 40 08 82 8a 00 14 49 48 6a 00     .D..@ @.....IHj.
     fb5:	00 00 00 00 00 00 00 00 00 00 00 40 d5 57 f5 4e     ...........@.W.N
     fc5:	01 00 03 00 00 00 80 32 25 11 12 20 01 08 04 a5     .......2%.. ....
     fd5:	54 20 92 40 20 91 54 00 00 00 00 00 00 00 00 00     T .@ .T.........
     fe5:	00 00 00 e0 7f fd af b5 00 00 00 00 10 00 08 49     ...............I
     ff5:	00 00 00 02 08 02 50 54 e1 02 40 15 0a 02 21 da     ......PT..@...!.
    1005:	4a 04 00 00 00 00 00 00 00 00 00 50 db 57 dd 5a     J..........P.W.Z
    1015:	00 00 00 00 20 00 20 60 ad 24 21 10 42 80 aa 2a     .... . `.$!.B..*
    1025:	2d 84 1a 82 90 54 14 00 04 21 00 00 00 00 00 00     -....T...!......
    1035:	00 00 00 f8 77 fd 6a 17 00 00 00 24 40 00 42 05     ....w.j....$@.B.
    1045:	50 02 84 84 00 50 95 52 72 2b 51 29 ad aa 15 24     P....P.Rr+Q)...$
    1055:	21 00 00 00 00 00 00 00 00 00 00 6c dd 57 af 0a     !..........l.W..
    1065:	00 00 40 81 80 80 10 28 80 bd 20 00 88 56 a5 94     ..@....(.. ..V..
    1075:	54 55 27 02 52 55 0d 00 00 00 00 00 00 00 00 00     TU'.RU..........
    1085:	00 00 00 fe b7 be b5 01 00 00 2a 00 03 08 80 02     ..........*.....
    1095:	00 60 9f 92 a0 aa 54 a5 9a aa 1c 48 a9 5a 1d 00     .`....T....H.Z..
    10a5:	00 00 00 00 00 00 00 00 00 00 00 ab 6a 6b 2d ba     ............jk-.
    10b5:	00 00 00 03 1c 20 e8 00 00 00 d1 6f 2f 29 25 55     ..... .....o/)%U
    10c5:	a9 5a a9 12 52 55 17 00 00 00 00 00 00 00 00 00     .Z..RU..........
    10d5:	00 00 c0 ff ad 55 4b e1 81 0a 01 00 28 80 0a 00     .....UK.....(...
    10e5:	00 00 00 88 54 b5 aa 24 5a 55 25 44 a9 aa 04 00     ....T..$ZU%D....
    10f5:	00 00 00 00 00 00 00 00 00 00 40 5b 7b b7 12 04     ..........@[{...
    1105:	47 d0 00 04 40 05 00 00 00 00 00 b4 2a 59 52 49     G...@.......*YRI
    1115:	55 55 48 11 69 db 0d 00 00 00 00 00 00 00 00 00     UUH.i...........
    1125:	00 00 f0 f7 d6 2a 0d 50 34 02 81 00 80 10 00 00     .....*.P4.......
    1135:	00 00 f0 4a 45 9a 94 aa 48 85 52 a4 54 35 0b 00     ...JE...H.R.T5..
    1145:	00 00 00 00 00 00 00 00 00 00 68 5d 6d cd 02 00     ..........h]m...
    1155:	89 10 02 00 00 a3 00 00 00 00 28 55 59 a5 2a 49     ..........(UY.*I
    1165:	55 2a 29 89 da d6 0e 00 00 00 00 00 00 00 00 00     U*).............
    1175:	00 00 bc b7 bb b5 00 00 00 44 08 09 00 00 01 00     .........D......
    1185:	00 00 54 a9 4a 2a 51 12 4a 09 54 52 55 55 1d 00     ..T.J*Q.J.TRUU..
    1195:	00 00 00 00 00 00 00 00 00 00 ea ee ae 4a 00 00     .............J..
    11a5:	7e 01 21 80 04 00 02 00 00 00 96 92 52 d1 a6 d4     ~.!.........R...
    11b5:	2a 42 25 89 aa 6d 2d 00 00 00 00 00 00 00 00 00     *B%..m-.........
    11c5:	00 00 bf dd 55 05 00 00 00 2c 88 12 00 00 02 00     ....U....,......
    11d5:	00 00 ab 24 54 54 29 95 42 00 aa 24 b5 5a 1b 00     ...$TT).B..$.Z..
    11e5:	00 00 00 00 00 00 00 00 00 80 f5 6b db 0a 00 00     ...........k....
    11f5:	00 80 20 40 10 00 0c 00 00 80 01 a9 92 52 55 25     .. @.........RU%
    1205:	08 a9 2a 51 ad d5 3a 00 00 00 00 00 00 00 00 00     ..*Q..:.........
    1215:	00 c0 af de b6 42 12 00 00 00 04 04 05 00 08 a0     .....B..........
    1225:	4a e2 50 10 55 95 a4 4a 42 80 aa 8a 6a ad 6e 00     J.P.U..JB...j.n.
    1235:	00 00 00 00 00 00 00 00 00 60 fd b5 2d 11 40 00     .........`..-.@.
    1245:	00 00 00 10 00 00 10 95 d5 54 0a a5 54 52 15 00     .........T..TR..
    1255:	00 44 55 a0 5a 6b 59 00 00 00 00 00 00 00 00 00     .DU.ZkY.........
    1265:	00 f0 56 ef 6a 82 84 02 00 40 00 40 02 00 40 20     ..V.j....@.@..@ 
    1275:	52 53 34 20 85 94 80 20 49 40 b5 2a 55 55 db 00     RS4 ... I@.*UU..
    1285:	00 00 00 00 00 00 00 00 00 58 ff ba ad 14 90 01     .........X......
    1295:	01 04 25 00 10 00 00 44 04 2a 49 85 2a 02 08 04     ..%....D.*I.*...
    12a5:	00 41 54 a2 b6 b6 ba 01 00 00 00 00 00 00 00 00     .AT.............
    12b5:	00 e8 ad af 5a 45 ea 00 00 10 80 0a 00 00 00 a8     ....ZE..........
    12c5:	d0 15 24 a8 55 40 40 90 24 c4 ac 48 d5 55 df 02     ..$.U@@.$..H.U..
    12d5:	00 00 00 00 00 00 00 00 00 b8 ff d5 d6 1a 28 00     ..............(.
    12e5:	00 01 08 a0 00 00 00 01 55 42 49 41 a5 10 02 02     ........UBIA....
    12f5:	80 90 28 55 ad aa 7a 03 00 00 00 00 00 00 00 00     ..(U..z.........
    1305:	00 fc b6 af b5 1a 91 02 02 20 21 09 0a a9 00 2a     ......... !....*
    1315:	a9 94 84 b4 54 02 10 20 09 84 54 a1 6a 6d d7 01     ....T.. ..T.jm..
    1325:	00 00 00 00 00 00 00 00 00 b4 ff ba 56 ae 26 28     ............V.&(
    1335:	10 04 08 80 20 00 02 40 2a 29 51 48 95 82 80 08     .... ..@*)QH....
    1345:	20 81 55 54 55 ab 7a 07 00 00 00 00 00 00 00 00      .UTU.z.........
    1355:	00 fc ad 6b ad 8b 88 42 04 21 41 12 84 24 08 ac     ...k...B.!A..$..
    1365:	0a 92 a4 95 e2 22 04 80 04 10 9a 52 ad aa ed 06     .....".....R....
    1375:	00 00 00 00 00 00 00 00 00 6e ff d6 5a 15 51 2a     .........n..Z.Q*
    1385:	40 00 04 40 10 80 02 88 42 25 8a 22 55 01 20 11     @..@....B%."U. .
    1395:	20 05 34 a9 52 55 b7 0b 00 00 00 00 00 00 00 00      .4.RU..........
    13a5:	00 fa eb ad d5 44 84 84 10 24 91 04 41 12 00 a5     .....D...$..A...
    13b5:	50 88 50 55 64 05 01 04 09 a0 aa a4 24 6a ed 0e     P.PUd.......$j..
    13c5:	00 00 00 00 00 00 00 00 00 de be 5a 5b 29 51 5a     ...........Z[)QZ
    13d5:	02 01 00 10 04 00 49 28 b5 52 05 82 4a 21 48 40     ......I(.R..J!H@
    13e5:	40 08 1a 29 51 49 ab 0b 00 00 00 00 00 00 00 00     @..)QI..........
    13f5:	00 f6 f7 b5 d6 12 a4 14 51 90 24 41 90 24 00 ab     ........Q.$A.$..
    1405:	14 25 a8 54 52 01 02 10 10 21 54 52 02 aa de 1e     .%.TR....!TR....
    1415:	00 00 00 00 00 00 00 00 00 bf 5e 6b ad a5 00 25     ..........^k...%
    1425:	04 02 00 04 01 00 00 45 a5 48 25 91 a8 82 80 04     .......E.H%.....
    1435:	42 56 85 88 54 48 6b 37 00 00 00 00 00 00 00 00     BV..THk7........
    1445:	00                                                  .

00001446 <__ctors_end>:
    1446:	11 24       	eor	r1, r1
    1448:	1f be       	out	0x3f, r1	; 63
    144a:	cf ef       	ldi	r28, 0xFF	; 255
    144c:	da e0       	ldi	r29, 0x0A	; 10
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	cd bf       	out	0x3d, r28	; 61

00001452 <__do_clear_bss>:
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b1 e0       	ldi	r27, 0x01	; 1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <.do_clear_bss_start>

0000145a <.do_clear_bss_loop>:
    145a:	1d 92       	st	X+, r1

0000145c <.do_clear_bss_start>:
    145c:	a0 32       	cpi	r26, 0x20	; 32
    145e:	b2 07       	cpc	r27, r18
    1460:	e1 f7       	brne	.-8      	; 0x145a <.do_clear_bss_loop>
    1462:	77 d1       	rcall	.+750    	; 0x1752 <main>
    1464:	5b c6       	rjmp	.+3254   	; 0x211c <_exit>

00001466 <__bad_interrupt>:
    1466:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000146a <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
    146a:	84 b7       	in	r24, 0x34	; 52
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	a8 95       	wdr
    1476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    147a:	88 61       	ori	r24, 0x18	; 24
    147c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1480:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1484:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1486:	80 e8       	ldi	r24, 0x80	; 128
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    1492:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    1496:	0f be       	out	0x3f, r0	; 63
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
    1498:	bf c3       	rjmp	.+1918   	; 0x1c18 <USB_Init>

0000149a <EVENT_USB_Device_Connect>:
}

// Fired to indicate that the device is enumerating.
void EVENT_USB_Device_Connect(void) {
	// We can indicate that we're enumerating here (via status LEDs, sound, etc.).
}
    149a:	08 95       	ret

0000149c <EVENT_USB_Device_Disconnect>:
    149c:	08 95       	ret

0000149e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    149e:	42 e3       	ldi	r20, 0x32	; 50
    14a0:	60 ec       	ldi	r22, 0xC0	; 192
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	f7 d2       	rcall	.+1518   	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv>
    14a6:	42 e3       	ldi	r20, 0x32	; 50
    14a8:	61 ec       	ldi	r22, 0xC1	; 193
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	f3 c2       	rjmp	.+1510   	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv>

000014ae <EVENT_USB_Device_ControlRequest>:
    14ae:	08 95       	ret

000014b0 <GetNextReport>:
int xpos = 0;
int ypos = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
    14b6:	98 e0       	ldi	r25, 0x08	; 8
    14b8:	fe 01       	movw	r30, r28
    14ba:	29 2f       	mov	r18, r25
    14bc:	11 92       	st	Z+, r1
    14be:	2a 95       	dec	r18
    14c0:	e9 f7       	brne	.-6      	; 0x14bc <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	8b 83       	std	Y+3, r24	; 0x03
	ReportData->LY = STICK_CENTER;
    14c6:	8c 83       	std	Y+4, r24	; 0x04
	ReportData->RX = STICK_CENTER;
    14c8:	8d 83       	std	Y+5, r24	; 0x05
	ReportData->RY = STICK_CENTER;
    14ca:	8e 83       	std	Y+6, r24	; 0x06
	ReportData->HAT = HAT_CENTER;
    14cc:	9a 83       	std	Y+2, r25	; 0x02

	// Repeat ECHOES times the last report
	if (echoes > 0)
    14ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <echoes>
    14d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <echoes+0x1>
    14d6:	18 16       	cp	r1, r24
    14d8:	19 06       	cpc	r1, r25
    14da:	a4 f4       	brge	.+40     	; 0x1504 <GetNextReport+0x54>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
    14dc:	88 e0       	ldi	r24, 0x08	; 8
    14de:	eb e0       	ldi	r30, 0x0B	; 11
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	de 01       	movw	r26, r28
    14e4:	01 90       	ld	r0, Z+
    14e6:	0d 92       	st	X+, r0
    14e8:	8a 95       	dec	r24
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <GetNextReport+0x34>
		echoes--;
    14ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <echoes>
    14f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <echoes+0x1>
    14f4:	01 97       	sbiw	r24, 0x01	; 1
		if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
			ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
	echoes = ECHOES;
    14f6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <echoes+0x1>
    14fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <echoes>

}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
    1504:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	09 f4       	brne	.+2      	; 0x150e <GetNextReport+0x5e>
    150c:	a4 c0       	rjmp	.+328    	; 0x1656 <GetNextReport+0x1a6>
    150e:	48 f4       	brcc	.+18     	; 0x1522 <GetNextReport+0x72>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f4       	brne	.+2      	; 0x1516 <GetNextReport+0x66>
    1514:	77 c0       	rjmp	.+238    	; 0x1604 <GetNextReport+0x154>
    1516:	08 f4       	brcc	.+2      	; 0x151a <GetNextReport+0x6a>
    1518:	47 c0       	rjmp	.+142    	; 0x15a8 <GetNextReport+0xf8>
				ReportData->Button |= SWITCH_L;
			}
			report_count++;
			break;
		case STOP_X:
			state = MOVE_X;
    151a:	84 e0       	ldi	r24, 0x04	; 4
				state = STOP_Y;
			break;
		case MOVE_Y:
			ReportData->HAT = HAT_BOTTOM;
			ypos++;
			state = STOP_X;
    151c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			break;
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <GetNextReport+0x80>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
    1522:	85 30       	cpi	r24, 0x05	; 5
    1524:	09 f4       	brne	.+2      	; 0x1528 <GetNextReport+0x78>
    1526:	c1 c0       	rjmp	.+386    	; 0x16aa <GetNextReport+0x1fa>
    1528:	08 f4       	brcc	.+2      	; 0x152c <GetNextReport+0x7c>
    152a:	a0 c0       	rjmp	.+320    	; 0x166c <GetNextReport+0x1bc>
    152c:	86 30       	cpi	r24, 0x06	; 6
    152e:	39 f3       	breq	.-50     	; 0x14fe <GetNextReport+0x4e>
			#endif
			return;
	}

	// Inking
	if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
    1530:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	68 f1       	brcs	.+90     	; 0x1592 <GetNextReport+0xe2>
		if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
    1538:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    153c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    1540:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    1544:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <ypos+0x1>
    1548:	48 e2       	ldi	r20, 0x28	; 40
    154a:	42 9f       	mul	r20, r18
    154c:	f0 01       	movw	r30, r0
    154e:	43 9f       	mul	r20, r19
    1550:	f0 0d       	add	r31, r0
    1552:	11 24       	eor	r1, r1
    1554:	9c 01       	movw	r18, r24
    1556:	97 ff       	sbrs	r25, 7
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GetNextReport+0xae>
    155a:	29 5f       	subi	r18, 0xF9	; 249
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	43 e0       	ldi	r20, 0x03	; 3
    1560:	35 95       	asr	r19
    1562:	27 95       	ror	r18
    1564:	4a 95       	dec	r20
    1566:	e1 f7       	brne	.-8      	; 0x1560 <GetNextReport+0xb0>
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	eb 57       	subi	r30, 0x7B	; 123
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	e4 91       	lpm	r30, Z
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	68 e0       	ldi	r22, 0x08	; 8
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	aa d5       	rcall	.+2900   	; 0x20ce <__divmodhi4>
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GetNextReport+0xd0>
    157c:	f5 95       	asr	r31
    157e:	e7 95       	ror	r30
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GetNextReport+0xcc>
    1584:	e0 ff       	sbrs	r30, 0
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <GetNextReport+0xe2>
			ReportData->Button |= SWITCH_A;
    1588:	88 81       	ld	r24, Y
    158a:	99 81       	ldd	r25, Y+1	; 0x01
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	99 83       	std	Y+1, r25	; 0x01
    1590:	88 83       	st	Y, r24

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
    1592:	88 e0       	ldi	r24, 0x08	; 8
    1594:	fe 01       	movw	r30, r28
    1596:	ab e0       	ldi	r26, 0x0B	; 11
    1598:	b1 e0       	ldi	r27, 0x01	; 1
    159a:	01 90       	ld	r0, Z+
    159c:	0d 92       	st	X+, r0
    159e:	8a 95       	dec	r24
    15a0:	e1 f7       	brne	.-8      	; 0x159a <GetNextReport+0xea>
	echoes = ECHOES;
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a7 cf       	rjmp	.-178    	; 0x14f6 <GetNextReport+0x46>

	// States and moves management
	switch (state)
	{
		case SYNC_CONTROLLER:
			if (report_count > 100)
    15a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    15ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    15b0:	85 36       	cpi	r24, 0x65	; 101
    15b2:	91 05       	cpc	r25, r1
    15b4:	8c f0       	brlt	.+34     	; 0x15d8 <GetNextReport+0x128>
			{
				report_count = 0;
    15b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <report_count+0x1>
    15ba:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <report_count>
				state = SYNC_POSITION;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
				// Clear the screen
				ReportData->Button |= SWITCH_LCLICK;
                                // Choose the smaller pencil
				ReportData->Button |= SWITCH_L;
			}
			report_count++;
    15c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    15c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <report_count+0x1>
    15d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <report_count>
			break;
    15d6:	ac cf       	rjmp	.-168    	; 0x1530 <GetNextReport+0x80>
			if (report_count > 100)
			{
				report_count = 0;
				state = SYNC_POSITION;
			}
			else if (report_count == 25 || report_count == 50)
    15d8:	89 31       	cpi	r24, 0x19	; 25
    15da:	91 05       	cpc	r25, r1
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <GetNextReport+0x134>
    15de:	82 33       	cpi	r24, 0x32	; 50
    15e0:	91 05       	cpc	r25, r1
    15e2:	31 f4       	brne	.+12     	; 0x15f0 <GetNextReport+0x140>
			{
				ReportData->Button |= SWITCH_L | SWITCH_R;
    15e4:	88 81       	ld	r24, Y
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	80 63       	ori	r24, 0x30	; 48
			if (report_count == 75 || report_count == 150)
			{
				// Clear the screen
				ReportData->Button |= SWITCH_LCLICK;
                                // Choose the smaller pencil
				ReportData->Button |= SWITCH_L;
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	88 83       	st	Y, r24
    15ee:	ea cf       	rjmp	.-44     	; 0x15c4 <GetNextReport+0x114>
			}
			else if (report_count == 25 || report_count == 50)
			{
				ReportData->Button |= SWITCH_L | SWITCH_R;
			}
			else if (report_count == 75 || report_count == 100)
    15f0:	8b 34       	cpi	r24, 0x4B	; 75
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <GetNextReport+0x14c>
    15f6:	84 36       	cpi	r24, 0x64	; 100
    15f8:	91 05       	cpc	r25, r1
    15fa:	21 f7       	brne	.-56     	; 0x15c4 <GetNextReport+0x114>
			{
				ReportData->Button |= SWITCH_A;
    15fc:	88 81       	ld	r24, Y
    15fe:	99 81       	ldd	r25, Y+1	; 0x01
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	f3 cf       	rjmp	.-26     	; 0x15ea <GetNextReport+0x13a>
			}
			report_count++;
			break;
		case SYNC_POSITION:
			if (report_count == 250)
    1604:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    1608:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    160c:	8a 3f       	cpi	r24, 0xFA	; 250
    160e:	91 05       	cpc	r25, r1
    1610:	f9 f4       	brne	.+62     	; 0x1650 <GetNextReport+0x1a0>
			{
				report_count = 0;
    1612:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <report_count+0x1>
    1616:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <report_count>
				xpos = 0;
    161a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <xpos+0x1>
    161e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <xpos>
				ypos = 0;
    1622:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ypos+0x1>
    1626:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ypos>
				state = STOP_X;
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			{
				// Moving faster with LX/LY
				ReportData->LX = STICK_MIN;
				ReportData->LY = STICK_MIN;
			}
			if (report_count == 75 || report_count == 150)
    1630:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    1634:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    1638:	8b 34       	cpi	r24, 0x4B	; 75
    163a:	91 05       	cpc	r25, r1
    163c:	21 f0       	breq	.+8      	; 0x1646 <GetNextReport+0x196>
    163e:	86 39       	cpi	r24, 0x96	; 150
    1640:	91 05       	cpc	r25, r1
    1642:	09 f0       	breq	.+2      	; 0x1646 <GetNextReport+0x196>
    1644:	bf cf       	rjmp	.-130    	; 0x15c4 <GetNextReport+0x114>
			{
				// Clear the screen
				ReportData->Button |= SWITCH_LCLICK;
                                // Choose the smaller pencil
				ReportData->Button |= SWITCH_L;
    1646:	88 81       	ld	r24, Y
    1648:	99 81       	ldd	r25, Y+1	; 0x01
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	94 60       	ori	r25, 0x04	; 4
    164e:	cd cf       	rjmp	.-102    	; 0x15ea <GetNextReport+0x13a>
				state = STOP_X;
			}
			else
			{
				// Moving faster with LX/LY
				ReportData->LX = STICK_MIN;
    1650:	1b 82       	std	Y+3, r1	; 0x03
				ReportData->LY = STICK_MIN;
    1652:	1c 82       	std	Y+4, r1	; 0x04
    1654:	ed cf       	rjmp	.-38     	; 0x1630 <GetNextReport+0x180>
			break;
		case STOP_X:
			state = MOVE_X;
			break;
		case STOP_Y:
			if (ypos < 120 - 1)
    1656:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    165a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    165e:	87 37       	cpi	r24, 0x77	; 119
    1660:	91 05       	cpc	r25, r1
    1662:	14 f4       	brge	.+4      	; 0x1668 <GetNextReport+0x1b8>
				state = MOVE_Y;
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	5a cf       	rjmp	.-332    	; 0x151c <GetNextReport+0x6c>
			else
				state = DONE;
    1668:	86 e0       	ldi	r24, 0x06	; 6
    166a:	58 cf       	rjmp	.-336    	; 0x151c <GetNextReport+0x6c>
    166c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    1670:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
			break;
		case MOVE_X:
			if (ypos % 2)
    1674:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    1678:	20 ff       	sbrs	r18, 0
    167a:	11 c0       	rjmp	.+34     	; 0x169e <GetNextReport+0x1ee>
			{
				ReportData->HAT = HAT_LEFT;
    167c:	26 e0       	ldi	r18, 0x06	; 6
    167e:	2a 83       	std	Y+2, r18	; 0x02
				xpos--;
    1680:	01 97       	sbiw	r24, 0x01	; 1
			}
			else
			{
				ReportData->HAT = HAT_RIGHT;
				xpos++;
    1682:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xpos+0x1>
    1686:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xpos>
			}
			if (xpos > 0 && xpos < 320 - 1)
    168a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    168e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	8e 33       	cpi	r24, 0x3E	; 62
    1696:	91 40       	sbci	r25, 0x01	; 1
    1698:	30 f4       	brcc	.+12     	; 0x16a6 <GetNextReport+0x1f6>
				state = STOP_Y;
			break;
		case MOVE_Y:
			ReportData->HAT = HAT_BOTTOM;
			ypos++;
			state = STOP_X;
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	3f cf       	rjmp	.-386    	; 0x151c <GetNextReport+0x6c>
				ReportData->HAT = HAT_LEFT;
				xpos--;
			}
			else
			{
				ReportData->HAT = HAT_RIGHT;
    169e:	22 e0       	ldi	r18, 0x02	; 2
    16a0:	2a 83       	std	Y+2, r18	; 0x02
				xpos++;
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	ee cf       	rjmp	.-36     	; 0x1682 <GetNextReport+0x1d2>
			}
			if (xpos > 0 && xpos < 320 - 1)
				state = STOP_X;
			else
				state = STOP_Y;
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	39 cf       	rjmp	.-398    	; 0x151c <GetNextReport+0x6c>
			break;
		case MOVE_Y:
			ReportData->HAT = HAT_BOTTOM;
    16aa:	84 e0       	ldi	r24, 0x04	; 4
    16ac:	8a 83       	std	Y+2, r24	; 0x02
			ypos++;
    16ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    16b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ypos+0x1>
    16bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ypos>
    16c0:	ec cf       	rjmp	.-40     	; 0x169a <GetNextReport+0x1ea>

000016c2 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	28 97       	sbiw	r28, 0x08	; 8
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
    16d6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    16da:	84 30       	cpi	r24, 0x04	; 4
    16dc:	89 f5       	brne	.+98     	; 0x1740 <HID_Task+0x7e>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
    16e8:	82 ff       	sbrs	r24, 2
    16ea:	12 c0       	rjmp	.+36     	; 0x1710 <HID_Task+0x4e>
			 *          on its direction.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
    16f0:	85 ff       	sbrs	r24, 5
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	67 e0       	ldi	r22, 0x07	; 7
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	ce 01       	movw	r24, r28
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	bc d0       	rcall	.+376    	; 0x187a <Endpoint_Read_Stream_LE>
    1702:	81 11       	cpse	r24, r1
    1704:	f7 cf       	rjmp	.-18     	; 0x16f4 <HID_Task+0x32>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1706:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    170a:	8b 77       	andi	r24, 0x7B	; 123
    170c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1716:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
    171a:	80 ff       	sbrs	r24, 0
    171c:	11 c0       	rjmp	.+34     	; 0x1740 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	c6 de       	rcall	.-628    	; 0x14b0 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	68 e0       	ldi	r22, 0x08	; 8
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	56 d0       	rcall	.+172    	; 0x17de <Endpoint_Write_Stream_LE>
    1732:	81 11       	cpse	r24, r1
    1734:	f7 cf       	rjmp	.-18     	; 0x1724 <HID_Task+0x62>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1736:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    173a:	8e 77       	andi	r24, 0x7E	; 126
    173c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
    1740:	28 96       	adiw	r28, 0x08	; 8
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <main>:
extern const uint8_t image_data[0x12c1] PROGMEM;

// Main entry point.
int main(void) {
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
    1752:	8b de       	rcall	.-746    	; 0x146a <SetupHardware>
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
    1754:	78 94       	sei
		// We also need to run the main USB management task.
		USB_USBTask();
    1756:	b5 df       	rcall	.-150    	; 0x16c2 <HID_Task>
    1758:	9f d4       	rcall	.+2366   	; 0x2098 <USB_USBTask>
    175a:	fd cf       	rjmp	.-6      	; 0x1756 <main+0x4>

0000175c <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(
	const uint16_t wValue,
	const uint16_t wIndex,
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
    175c:	29 2f       	mov	r18, r25
    175e:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1760:	23 30       	cpi	r18, 0x03	; 3
    1762:	31 05       	cpc	r19, r1
    1764:	21 f1       	breq	.+72     	; 0x17ae <CALLBACK_USB_GetDescriptor+0x52>
    1766:	58 f4       	brcc	.+22     	; 0x177e <CALLBACK_USB_GetDescriptor+0x22>
    1768:	21 30       	cpi	r18, 0x01	; 1
    176a:	31 05       	cpc	r19, r1
    176c:	99 f0       	breq	.+38     	; 0x1794 <CALLBACK_USB_GetDescriptor+0x38>
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	c1 f0       	breq	.+48     	; 0x17a4 <CALLBACK_USB_GetDescriptor+0x48>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	0f c0       	rjmp	.+30     	; 0x179c <CALLBACK_USB_GetDescriptor+0x40>
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    177e:	21 32       	cpi	r18, 0x21	; 33
    1780:	31 05       	cpc	r19, r1
    1782:	41 f1       	breq	.+80     	; 0x17d4 <CALLBACK_USB_GetDescriptor+0x78>
    1784:	22 32       	cpi	r18, 0x22	; 34
    1786:	31 05       	cpc	r19, r1
    1788:	a9 f7       	brne	.-22     	; 0x1774 <CALLBACK_USB_GetDescriptor+0x18>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
    178a:	86 e5       	ldi	r24, 0x56	; 86
    178c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
    178e:	2f e2       	ldi	r18, 0x2F	; 47
    1790:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
    1792:	04 c0       	rjmp	.+8      	; 0x179c <CALLBACK_USB_GetDescriptor+0x40>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1794:	82 e1       	ldi	r24, 0x12	; 18
    1796:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1798:	2d e1       	ldi	r18, 0x1D	; 29
    179a:	31 e0       	ldi	r19, 0x01	; 1
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
    179c:	fa 01       	movw	r30, r20
    179e:	31 83       	std	Z+1, r19	; 0x01
    17a0:	20 83       	st	Z, r18
	return Size;
}
    17a2:	08 95       	ret
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    17a4:	89 e2       	ldi	r24, 0x29	; 41
    17a6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    17a8:	24 ef       	ldi	r18, 0xF4	; 244
    17aa:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    17ac:	f7 cf       	rjmp	.-18     	; 0x179c <CALLBACK_USB_GetDescriptor+0x40>
		case DTYPE_String:
			switch (DescriptorNumber)
    17ae:	99 27       	eor	r25, r25
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	61 f0       	breq	.+24     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x72>
    17b6:	28 f0       	brcs	.+10     	; 0x17c2 <CALLBACK_USB_GetDescriptor+0x66>
    17b8:	02 97       	sbiw	r24, 0x02	; 2
    17ba:	e1 f6       	brne	.-72     	; 0x1774 <CALLBACK_USB_GetDescriptor+0x18>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    17bc:	ec ea       	ldi	r30, 0xAC	; 172
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <CALLBACK_USB_GetDescriptor+0x6a>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    17c2:	e0 ef       	ldi	r30, 0xF0	; 240
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    17c6:	84 91       	lpm	r24, Z
    17c8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    17ca:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    17cc:	e7 cf       	rjmp	.-50     	; 0x179c <CALLBACK_USB_GetDescriptor+0x40>
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    17ce:	e2 ed       	ldi	r30, 0xD2	; 210
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	f9 cf       	rjmp	.-14     	; 0x17c6 <CALLBACK_USB_GetDescriptor+0x6a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    17d4:	89 e0       	ldi	r24, 0x09	; 9
    17d6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
    17d8:	26 e0       	ldi	r18, 0x06	; 6
    17da:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    17dc:	df cf       	rjmp	.-66     	; 0x179c <CALLBACK_USB_GetDescriptor+0x40>

000017de <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	6c 01       	movw	r12, r24
    17f2:	eb 01       	movw	r28, r22
    17f4:	8a 01       	movw	r16, r20
    17f6:	a1 d1       	rcall	.+834    	; 0x1b3a <Endpoint_WaitUntilReady>
    17f8:	f8 2e       	mov	r15, r24
    17fa:	81 11       	cpse	r24, r1
    17fc:	24 c0       	rjmp	.+72     	; 0x1846 <Endpoint_Write_Stream_LE+0x68>
    17fe:	01 15       	cp	r16, r1
    1800:	11 05       	cpc	r17, r1
    1802:	39 f0       	breq	.+14     	; 0x1812 <Endpoint_Write_Stream_LE+0x34>
    1804:	f8 01       	movw	r30, r16
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	c8 1b       	sub	r28, r24
    180c:	d9 0b       	sbc	r29, r25
    180e:	c8 0e       	add	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	b1 2c       	mov	r11, r1
    1814:	a1 2c       	mov	r10, r1
    1816:	20 97       	sbiw	r28, 0x00	; 0
    1818:	b1 f0       	breq	.+44     	; 0x1846 <Endpoint_Write_Stream_LE+0x68>
    181a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    181e:	85 fd       	sbrc	r24, 5
    1820:	22 c0       	rjmp	.+68     	; 0x1866 <Endpoint_Write_Stream_LE+0x88>
    1822:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1826:	8e 77       	andi	r24, 0x7E	; 126
    1828:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    182c:	35 d4       	rcall	.+2154   	; 0x2098 <USB_USBTask>
    182e:	01 15       	cp	r16, r1
    1830:	11 05       	cpc	r17, r1
    1832:	a1 f0       	breq	.+40     	; 0x185c <Endpoint_Write_Stream_LE+0x7e>
    1834:	f8 01       	movw	r30, r16
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	a8 0e       	add	r10, r24
    183c:	b9 1e       	adc	r11, r25
    183e:	b1 82       	std	Z+1, r11	; 0x01
    1840:	a0 82       	st	Z, r10
    1842:	85 e0       	ldi	r24, 0x05	; 5
    1844:	f8 2e       	mov	r15, r24
    1846:	8f 2d       	mov	r24, r15
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	08 95       	ret
    185c:	6e d1       	rcall	.+732    	; 0x1b3a <Endpoint_WaitUntilReady>
    185e:	88 23       	and	r24, r24
    1860:	d1 f2       	breq	.-76     	; 0x1816 <Endpoint_Write_Stream_LE+0x38>
    1862:	f8 2e       	mov	r15, r24
    1864:	f0 cf       	rjmp	.-32     	; 0x1846 <Endpoint_Write_Stream_LE+0x68>
    1866:	f6 01       	movw	r30, r12
    1868:	81 91       	ld	r24, Z+
    186a:	6f 01       	movw	r12, r30
    186c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1870:	21 97       	sbiw	r28, 0x01	; 1
    1872:	ff ef       	ldi	r31, 0xFF	; 255
    1874:	af 1a       	sub	r10, r31
    1876:	bf 0a       	sbc	r11, r31
    1878:	ce cf       	rjmp	.-100    	; 0x1816 <Endpoint_Write_Stream_LE+0x38>

0000187a <Endpoint_Read_Stream_LE>:
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	6c 01       	movw	r12, r24
    188e:	eb 01       	movw	r28, r22
    1890:	8a 01       	movw	r16, r20
    1892:	53 d1       	rcall	.+678    	; 0x1b3a <Endpoint_WaitUntilReady>
    1894:	f8 2e       	mov	r15, r24
    1896:	81 11       	cpse	r24, r1
    1898:	24 c0       	rjmp	.+72     	; 0x18e2 <Endpoint_Read_Stream_LE+0x68>
    189a:	01 15       	cp	r16, r1
    189c:	11 05       	cpc	r17, r1
    189e:	39 f0       	breq	.+14     	; 0x18ae <Endpoint_Read_Stream_LE+0x34>
    18a0:	f8 01       	movw	r30, r16
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	c8 1b       	sub	r28, r24
    18a8:	d9 0b       	sbc	r29, r25
    18aa:	c8 0e       	add	r12, r24
    18ac:	d9 1e       	adc	r13, r25
    18ae:	b1 2c       	mov	r11, r1
    18b0:	a1 2c       	mov	r10, r1
    18b2:	20 97       	sbiw	r28, 0x00	; 0
    18b4:	b1 f0       	breq	.+44     	; 0x18e2 <Endpoint_Read_Stream_LE+0x68>
    18b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18ba:	85 fd       	sbrc	r24, 5
    18bc:	22 c0       	rjmp	.+68     	; 0x1902 <Endpoint_Read_Stream_LE+0x88>
    18be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18c2:	8b 77       	andi	r24, 0x7B	; 123
    18c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18c8:	e7 d3       	rcall	.+1998   	; 0x2098 <USB_USBTask>
    18ca:	01 15       	cp	r16, r1
    18cc:	11 05       	cpc	r17, r1
    18ce:	a1 f0       	breq	.+40     	; 0x18f8 <Endpoint_Read_Stream_LE+0x7e>
    18d0:	f8 01       	movw	r30, r16
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	a8 0e       	add	r10, r24
    18d8:	b9 1e       	adc	r11, r25
    18da:	b1 82       	std	Z+1, r11	; 0x01
    18dc:	a0 82       	st	Z, r10
    18de:	85 e0       	ldi	r24, 0x05	; 5
    18e0:	f8 2e       	mov	r15, r24
    18e2:	8f 2d       	mov	r24, r15
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	08 95       	ret
    18f8:	20 d1       	rcall	.+576    	; 0x1b3a <Endpoint_WaitUntilReady>
    18fa:	88 23       	and	r24, r24
    18fc:	d1 f2       	breq	.-76     	; 0x18b2 <Endpoint_Read_Stream_LE+0x38>
    18fe:	f8 2e       	mov	r15, r24
    1900:	f0 cf       	rjmp	.-32     	; 0x18e2 <Endpoint_Read_Stream_LE+0x68>
    1902:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1906:	f6 01       	movw	r30, r12
    1908:	81 93       	st	Z+, r24
    190a:	6f 01       	movw	r12, r30
    190c:	21 97       	sbiw	r28, 0x01	; 1
    190e:	ff ef       	ldi	r31, 0xFF	; 255
    1910:	af 1a       	sub	r10, r31
    1912:	bf 0a       	sbc	r11, r31
    1914:	ce cf       	rjmp	.-100    	; 0x18b2 <Endpoint_Read_Stream_LE+0x38>

00001916 <Endpoint_Write_Control_Stream_LE>:
    1916:	fc 01       	movw	r30, r24
    1918:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x6>
    191c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest+0x7>
    1920:	86 17       	cp	r24, r22
    1922:	97 07       	cpc	r25, r23
    1924:	a0 f0       	brcs	.+40     	; 0x194e <Endpoint_Write_Control_Stream_LE+0x38>
    1926:	61 15       	cp	r22, r1
    1928:	71 05       	cpc	r23, r1
    192a:	29 f4       	brne	.+10     	; 0x1936 <Endpoint_Write_Control_Stream_LE+0x20>
    192c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1930:	9e 77       	andi	r25, 0x7E	; 126
    1932:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	51 f4       	brne	.+20     	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x3c>
    193e:	91 11       	cpse	r25, r1
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <Endpoint_Write_Control_Stream_LE+0x3c>
    1942:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1946:	82 ff       	sbrs	r24, 2
    1948:	35 c0       	rjmp	.+106    	; 0x19b4 <Endpoint_Write_Control_Stream_LE+0x9e>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    194e:	bc 01       	movw	r22, r24
    1950:	f2 cf       	rjmp	.-28     	; 0x1936 <Endpoint_Write_Control_Stream_LE+0x20>
    1952:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    1956:	88 23       	and	r24, r24
    1958:	c9 f1       	breq	.+114    	; 0x19cc <Endpoint_Write_Control_Stream_LE+0xb6>
    195a:	85 30       	cpi	r24, 0x05	; 5
    195c:	c9 f1       	breq	.+114    	; 0x19d0 <Endpoint_Write_Control_Stream_LE+0xba>
    195e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1962:	83 fd       	sbrc	r24, 3
    1964:	31 c0       	rjmp	.+98     	; 0x19c8 <Endpoint_Write_Control_Stream_LE+0xb2>
    1966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    196a:	82 fd       	sbrc	r24, 2
    196c:	ea cf       	rjmp	.-44     	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x2c>
    196e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1972:	80 ff       	sbrs	r24, 0
    1974:	e1 cf       	rjmp	.-62     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x22>
    1976:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    197a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    197e:	32 2f       	mov	r19, r18
    1980:	28 2f       	mov	r18, r24
    1982:	61 15       	cp	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	19 f0       	breq	.+6      	; 0x198e <Endpoint_Write_Control_Stream_LE+0x78>
    1988:	20 34       	cpi	r18, 0x40	; 64
    198a:	31 05       	cpc	r19, r1
    198c:	58 f0       	brcs	.+22     	; 0x19a4 <Endpoint_Write_Control_Stream_LE+0x8e>
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	20 34       	cpi	r18, 0x40	; 64
    1992:	31 05       	cpc	r19, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <Endpoint_Write_Control_Stream_LE+0x82>
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    199c:	2e 77       	andi	r18, 0x7E	; 126
    199e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19a2:	ca cf       	rjmp	.-108    	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x22>
    19a4:	81 91       	ld	r24, Z+
    19a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	71 09       	sbc	r23, r1
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	e7 cf       	rjmp	.-50     	; 0x1982 <Endpoint_Write_Control_Stream_LE+0x6c>
    19b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    19b8:	88 23       	and	r24, r24
    19ba:	41 f0       	breq	.+16     	; 0x19cc <Endpoint_Write_Control_Stream_LE+0xb6>
    19bc:	85 30       	cpi	r24, 0x05	; 5
    19be:	41 f0       	breq	.+16     	; 0x19d0 <Endpoint_Write_Control_Stream_LE+0xba>
    19c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19c4:	83 ff       	sbrs	r24, 3
    19c6:	bd cf       	rjmp	.-134    	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x2c>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	08 95       	ret
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	08 95       	ret
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	08 95       	ret

000019d4 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    19d4:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x6>
    19da:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest+0x7>
    19de:	86 17       	cp	r24, r22
    19e0:	97 07       	cpc	r25, r23
    19e2:	a0 f0       	brcs	.+40     	; 0x1a0c <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19e4:	61 15       	cp	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19ee:	8e 77       	andi	r24, 0x7E	; 126
    19f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19f4:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	51 f4       	brne	.+20     	; 0x1a10 <Endpoint_Write_Control_PStream_LE+0x3c>
    19fc:	91 11       	cpse	r25, r1
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <Endpoint_Write_Control_PStream_LE+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a04:	82 ff       	sbrs	r24, 2
    1a06:	36 c0       	rjmp	.+108    	; 0x1a74 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	f2 cf       	rjmp	.-28     	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x20>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a10:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a14:	88 23       	and	r24, r24
    1a16:	d1 f1       	breq	.+116    	; 0x1a8c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a18:	85 30       	cpi	r24, 0x05	; 5
    1a1a:	d1 f1       	breq	.+116    	; 0x1a90 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a20:	83 fd       	sbrc	r24, 3
    1a22:	32 c0       	rjmp	.+100    	; 0x1a88 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a28:	82 fd       	sbrc	r24, 2
    1a2a:	ea cf       	rjmp	.-44     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
    1a30:	80 ff       	sbrs	r24, 0
    1a32:	e1 cf       	rjmp	.-62     	; 0x19f6 <Endpoint_Write_Control_PStream_LE+0x22>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a34:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1a38:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1a3c:	32 2f       	mov	r19, r18
    1a3e:	28 2f       	mov	r18, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a40:	61 15       	cp	r22, r1
    1a42:	71 05       	cpc	r23, r1
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <Endpoint_Write_Control_PStream_LE+0x78>
    1a46:	20 34       	cpi	r18, 0x40	; 64
    1a48:	31 05       	cpc	r19, r1
    1a4a:	58 f0       	brcs	.+22     	; 0x1a62 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	20 34       	cpi	r18, 0x40	; 64
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0x82>
    1a54:	90 e0       	ldi	r25, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a5a:	8e 77       	andi	r24, 0x7E	; 126
    1a5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a60:	ca cf       	rjmp	.-108    	; 0x19f6 <Endpoint_Write_Control_PStream_LE+0x22>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a62:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a64:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a68:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a6a:	61 50       	subi	r22, 0x01	; 1
    1a6c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	e6 cf       	rjmp	.-52     	; 0x1a40 <Endpoint_Write_Control_PStream_LE+0x6c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a74:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a78:	88 23       	and	r24, r24
    1a7a:	41 f0       	breq	.+16     	; 0x1a8c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a7c:	85 30       	cpi	r24, 0x05	; 5
    1a7e:	41 f0       	breq	.+16     	; 0x1a90 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a84:	83 ff       	sbrs	r24, 3
    1a86:	bc cf       	rjmp	.-136    	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x2c>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a8a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	08 95       	ret

00001a94 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a94:	98 2f       	mov	r25, r24
    1a96:	97 30       	cpi	r25, 0x07	; 7
    1a98:	28 f0       	brcs	.+10     	; 0x1aa4 <Endpoint_ConfigureEndpoint_Prv+0x10>
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	08 95       	ret
    1aa4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1aa8:	24 2f       	mov	r18, r20
    1aaa:	76 2f       	mov	r23, r22
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	98 17       	cp	r25, r24
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1ab2:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1ab6:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1aba:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1abe:	21 fd       	sbrc	r18, 1
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <Endpoint_ConfigureEndpoint_Prv+0x32>
    1ac2:	9f 5f       	subi	r25, 0xFF	; 255
    1ac4:	e8 cf       	rjmp	.-48     	; 0x1a96 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1ac6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1aca:	3e 7f       	andi	r19, 0xFE	; 254
    1acc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1ad0:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1ad4:	3d 7f       	andi	r19, 0xFD	; 253
    1ad6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1ada:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1ade:	31 60       	ori	r19, 0x01	; 1
    1ae0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1ae4:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1ae8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1aec:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1af0:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1af4:	27 fd       	sbrc	r18, 7
    1af6:	e5 cf       	rjmp	.-54     	; 0x1ac2 <Endpoint_ConfigureEndpoint_Prv+0x2e>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret

00001afc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1afc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest>
    1b00:	87 ff       	sbrs	r24, 7
    1b02:	13 c0       	rjmp	.+38     	; 0x1b2a <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1b08:	82 ff       	sbrs	r24, 2
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <Endpoint_ClearStatusStage+0x1c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1b10:	8b 77       	andi	r24, 0x7B	; 123
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b18:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	f2 cf       	rjmp	.-28     	; 0x1b04 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1b20:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b22:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    1b26:	88 23       	and	r24, r24
    1b28:	d9 f3       	breq	.-10     	; 0x1b20 <Endpoint_ClearStatusStage+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b2e:	80 ff       	sbrs	r24, 0
    1b30:	f8 cf       	rjmp	.-16     	; 0x1b22 <Endpoint_ClearStatusStage+0x26>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1b36:	8e 77       	andi	r24, 0x7E	; 126
    1b38:	ec cf       	rjmp	.-40     	; 0x1b12 <Endpoint_ClearStatusStage+0x16>

00001b3a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b3a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1b3e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    1b42:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b44:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1b48:	90 ff       	sbrs	r25, 0
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b4c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b50:	90 ff       	sbrs	r25, 0
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b5c:	92 fd       	sbrc	r25, 2
    1b5e:	fa cf       	rjmp	.-12     	; 0x1b54 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b60:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b64:	99 23       	and	r25, r25
    1b66:	91 f0       	breq	.+36     	; 0x1b8c <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b68:	95 30       	cpi	r25, 0x05	; 5
    1b6a:	91 f0       	breq	.+36     	; 0x1b90 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b6c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b70:	95 fd       	sbrc	r25, 5
    1b72:	10 c0       	rjmp	.+32     	; 0x1b94 <Endpoint_WaitUntilReady+0x5a>
    1b74:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1b78:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b7c:	24 17       	cp	r18, r20
    1b7e:	35 07       	cpc	r19, r21
    1b80:	09 f3       	breq	.-62     	; 0x1b44 <Endpoint_WaitUntilReady+0xa>
    1b82:	81 50       	subi	r24, 0x01	; 1
    1b84:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b86:	f1 f6       	brne	.-68     	; 0x1b44 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b94:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b96:	08 95       	ret

00001b98 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1ba0:	4b d0       	rcall	.+150    	; 0x1c38 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ba2:	52 d0       	rcall	.+164    	; 0x1c48 <USB_INT_ClearAllInterrupts>
    1ba4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ba6:	d0 e0       	ldi	r29, 0x00	; 0
    1ba8:	88 81       	ld	r24, Y
    1baa:	8f 77       	andi	r24, 0x7F	; 127
    1bac:	88 83       	st	Y, r24
    1bae:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	88 83       	st	Y, r24
    1bb4:	88 81       	ld	r24, Y
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1bb6:	8f 7d       	andi	r24, 0xDF	; 223
    1bb8:	88 83       	st	Y, r24
    1bba:	19 bc       	out	0x29, r1	; 41
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bbc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bc0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1bc4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bc8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bcc:	00 ee       	ldi	r16, 0xE0	; 224
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8b 7f       	andi	r24, 0xFB	; 251
    1bd6:	80 83       	st	Z, r24
    1bd8:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	88 83       	st	Y, r24
    1bde:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	57 df       	rcall	.-338    	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv>
    1be6:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8e 7f       	andi	r24, 0xFE	; 254
    1bee:	80 83       	st	Z, r24
    1bf0:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	81 60       	ori	r24, 0x01	; 1
    1bf8:	80 83       	st	Z, r24
    1bfa:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1bfc:	88 60       	ori	r24, 0x08	; 8
    1bfe:	80 83       	st	Z, r24
    1c00:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c02:	80 81       	ld	r24, Z
    1c04:	8e 7f       	andi	r24, 0xFE	; 254
    1c06:	80 83       	st	Z, r24
    1c08:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			ATTR_ALWAYS_INLINE
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c0a:	80 61       	ori	r24, 0x10	; 16
    1c0c:	88 83       	st	Y, r24
    1c0e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <USB_Init>:
    1c18:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 7e       	andi	r24, 0xEF	; 239
    1c20:	80 83       	st	Z, r24

			ATTR_ALWAYS_INLINE
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c22:	e7 ed       	ldi	r30, 0xD7	; 215
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_IsInitialized>

	USB_ResetInterface();
    1c36:	b0 cf       	rjmp	.-160    	; 0x1b98 <USB_ResetInterface>

00001c38 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c38:	e8 ed       	ldi	r30, 0xD8	; 216
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8e 7f       	andi	r24, 0xFE	; 254
    1c40:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c42:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	#endif
}
    1c46:	08 95       	ret

00001c48 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c48:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c4c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#endif
}
    1c50:	08 95       	ret

00001c52 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c78:	82 ff       	sbrs	r24, 2
    1c7a:	0a c0       	rjmp	.+20     	; 0x1c90 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1c80:	82 ff       	sbrs	r24, 2
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1c88:	8b 7f       	andi	r24, 0xFB	; 251
    1c8a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c8e:	03 d2       	rcall	.+1030   	; 0x2096 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c90:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c94:	80 ff       	sbrs	r24, 0
    1c96:	18 c0       	rjmp	.+48     	; 0x1cc8 <__vector_10+0x76>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c98:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1c9c:	80 ff       	sbrs	r24, 0
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <__vector_10+0x76>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1ca0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    1ca4:	8e 7f       	andi	r24, 0xFE	; 254
    1ca6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1caa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1cae:	80 ff       	sbrs	r24, 0
    1cb0:	8a c0       	rjmp	.+276    	; 0x1dc6 <__vector_10+0x174>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cb2:	80 e1       	ldi	r24, 0x10	; 16
    1cb4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cb6:	82 e1       	ldi	r24, 0x12	; 18
    1cb8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cba:	09 b4       	in	r0, 0x29	; 41
    1cbc:	00 fe       	sbrs	r0, 0
    1cbe:	fd cf       	rjmp	.-6      	; 0x1cba <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1cc6:	e9 db       	rcall	.-2094   	; 0x149a <EVENT_USB_Device_Connect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cc8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	18 c0       	rjmp	.+48     	; 0x1d00 <__vector_10+0xae>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1cd0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1cd4:	80 ff       	sbrs	r24, 0
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <__vector_10+0xae>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cd8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ce2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1ce6:	80 61       	ori	r24, 0x10	; 16
    1ce8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1cec:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1cf0:	80 62       	ori	r24, 0x20	; 32
    1cf2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cf6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1cf8:	85 e0       	ldi	r24, 0x05	; 5
    1cfa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1cfe:	cb d1       	rcall	.+918    	; 0x2096 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d00:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d04:	84 ff       	sbrs	r24, 4
    1d06:	28 c0       	rjmp	.+80     	; 0x1d58 <__vector_10+0x106>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d0c:	84 ff       	sbrs	r24, 4
    1d0e:	24 c0       	rjmp	.+72     	; 0x1d58 <__vector_10+0x106>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d14:	82 e1       	ldi	r24, 0x12	; 18
    1d16:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d18:	09 b4       	in	r0, 0x29	; 41
    1d1a:	00 fe       	sbrs	r0, 0
    1d1c:	fd cf       	rjmp	.-6      	; 0x1d18 <__vector_10+0xc6>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d1e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1d22:	8f 7d       	andi	r24, 0xDF	; 223
    1d24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d28:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d2c:	8f 7e       	andi	r24, 0xEF	; 239
    1d2e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d32:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d36:	8f 7e       	andi	r24, 0xEF	; 239
    1d38:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d3c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d40:	81 60       	ori	r24, 0x01	; 1
    1d42:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d46:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <__vector_10+0xfe>
    1d4e:	40 c0       	rjmp	.+128    	; 0x1dd0 <__vector_10+0x17e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d50:	84 e0       	ldi	r24, 0x04	; 4
    1d52:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d56:	9f d1       	rcall	.+830    	; 0x2096 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d58:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d5c:	83 ff       	sbrs	r24, 3
    1d5e:	22 c0       	rjmp	.+68     	; 0x1da4 <__vector_10+0x152>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d60:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d64:	83 ff       	sbrs	r24, 3
    1d66:	1e c0       	rjmp	.+60     	; 0x1da4 <__vector_10+0x152>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d68:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d6c:	87 7f       	andi	r24, 0xF7	; 247
    1d6e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d78:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d80:	8e 7f       	andi	r24, 0xFE	; 254
    1d82:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d8a:	8e 7f       	andi	r24, 0xFE	; 254
    1d8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d94:	80 61       	ori	r24, 0x10	; 16
    1d96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d9a:	42 e3       	ldi	r20, 0x32	; 50
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1da0:	79 de       	rcall	.-782    	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv>
    1da2:	79 d1       	rcall	.+754    	; 0x2096 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1dc4:	18 95       	reti
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1dc6:	19 bc       	out	0x29, r1	; 41
    1dc8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1dcc:	67 db       	rcall	.-2354   	; 0x149c <EVENT_USB_Device_Disconnect>
    1dce:	7c cf       	rjmp	.-264    	; 0x1cc8 <__vector_10+0x76>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1dd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1dd4:	87 fd       	sbrc	r24, 7
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <__vector_10+0x18a>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	bb cf       	rjmp	.-138    	; 0x1d52 <__vector_10+0x100>
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	b9 cf       	rjmp	.-142    	; 0x1d52 <__vector_10+0x100>

00001de0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	aa 97       	sbiw	r28, 0x2a	; 42
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	e8 e1       	ldi	r30, 0x18	; 24
    1df8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1dfa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1dfe:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	e0 32       	cpi	r30, 0x20	; 32
    1e04:	f2 07       	cpc	r31, r18
    1e06:	c9 f7       	brne	.-14     	; 0x1dfa <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e08:	52 db       	rcall	.-2396   	; 0x14ae <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    1e0e:	83 ff       	sbrs	r24, 3
    1e10:	10 c0       	rjmp	.+32     	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e12:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1e16:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_ControlRequest+0x1>
    1e1a:	95 30       	cpi	r25, 0x05	; 5
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <USB_Device_ProcessControlRequest+0x40>
    1e1e:	d8 c0       	rjmp	.+432    	; 0x1fd0 <USB_Device_ProcessControlRequest+0x1f0>
    1e20:	00 f5       	brcc	.+64     	; 0x1e62 <USB_Device_ProcessControlRequest+0x82>
    1e22:	91 30       	cpi	r25, 0x01	; 1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <USB_Device_ProcessControlRequest+0x48>
    1e26:	8b c0       	rjmp	.+278    	; 0x1f3e <USB_Device_ProcessControlRequest+0x15e>
    1e28:	08 f4       	brcc	.+2      	; 0x1e2c <USB_Device_ProcessControlRequest+0x4c>
    1e2a:	61 c0       	rjmp	.+194    	; 0x1eee <USB_Device_ProcessControlRequest+0x10e>
    1e2c:	93 30       	cpi	r25, 0x03	; 3
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
    1e30:	86 c0       	rjmp	.+268    	; 0x1f3e <USB_Device_ProcessControlRequest+0x15e>
    1e32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1e36:	83 ff       	sbrs	r24, 3
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <USB_Device_ProcessControlRequest+0x6e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1e3e:	87 7f       	andi	r24, 0xF7	; 247
    1e40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e44:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1e48:	80 62       	ori	r24, 0x20	; 32
    1e4a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1e4e:	aa 96       	adiw	r28, 0x2a	; 42
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    1e62:	98 30       	cpi	r25, 0x08	; 8
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <USB_Device_ProcessControlRequest+0x88>
    1e66:	ec c0       	rjmp	.+472    	; 0x2040 <USB_Device_ProcessControlRequest+0x260>
    1e68:	99 30       	cpi	r25, 0x09	; 9
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <USB_Device_ProcessControlRequest+0x8e>
    1e6c:	f6 c0       	rjmp	.+492    	; 0x205a <USB_Device_ProcessControlRequest+0x27a>
    1e6e:	96 30       	cpi	r25, 0x06	; 6
    1e70:	01 f7       	brne	.-64     	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e72:	80 58       	subi	r24, 0x80	; 128
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	e8 f6       	brcc	.-70     	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e78:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1e7c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x3>
    1e80:	8c 3d       	cpi	r24, 0xDC	; 220
    1e82:	23 e0       	ldi	r18, 0x03	; 3
    1e84:	92 07       	cpc	r25, r18
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <USB_Device_ProcessControlRequest+0xaa>
    1e88:	c6 c0       	rjmp	.+396    	; 0x2016 <USB_Device_ProcessControlRequest+0x236>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e8e:	8a e2       	ldi	r24, 0x2A	; 42
    1e90:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e92:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e94:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e96:	de 01       	movw	r26, r28
    1e98:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e9c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e9e:	51 e2       	ldi	r21, 0x21	; 33
    1ea0:	e3 2f       	mov	r30, r19
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    1ea8:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1eaa:	20 ff       	sbrs	r18, 0
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
    1eae:	e2 95       	swap	r30
    1eb0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1eb2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1eb4:	ef 70       	andi	r30, 0x0F	; 15
    1eb6:	8e 2f       	mov	r24, r30
    1eb8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1eba:	ea 30       	cpi	r30, 0x0A	; 10
    1ebc:	08 f4       	brcc	.+2      	; 0x1ec0 <USB_Device_ProcessControlRequest+0xe0>
    1ebe:	a9 c0       	rjmp	.+338    	; 0x2012 <USB_Device_ProcessControlRequest+0x232>
    1ec0:	c7 96       	adiw	r24, 0x37	; 55
    1ec2:	8d 93       	st	X+, r24
    1ec4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	24 31       	cpi	r18, 0x14	; 20
    1eca:	51 f7       	brne	.-44     	; 0x1ea0 <USB_Device_ProcessControlRequest+0xc0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1ecc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ece:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ed2:	87 7f       	andi	r24, 0xF7	; 247
    1ed4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ed8:	6a e2       	ldi	r22, 0x2A	; 42
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	1a dd       	rcall	.-1484   	; 0x1916 <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1ee6:	8b 77       	andi	r24, 0x7B	; 123
    1ee8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1eec:	a2 cf       	rjmp	.-188    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1eee:	80 38       	cpi	r24, 0x80	; 128
    1ef0:	99 f0       	breq	.+38     	; 0x1f18 <USB_Device_ProcessControlRequest+0x138>
    1ef2:	82 38       	cpi	r24, 0x82	; 130
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <USB_Device_ProcessControlRequest+0x118>
    1ef6:	9d cf       	rjmp	.-198    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ef8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    1efc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1efe:	87 30       	cpi	r24, 0x07	; 7
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <USB_Device_ProcessControlRequest+0x124>
    1f02:	97 cf       	rjmp	.-210    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f04:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f0c:	85 fb       	bst	r24, 5
    1f0e:	88 27       	eor	r24, r24
    1f10:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f12:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <USB_Device_ProcessControlRequest+0x144>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f18:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f1c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USB_Device_RemoteWakeupEnabled>
    1f20:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f22:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f24:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1f28:	97 7f       	andi	r25, 0xF7	; 247
    1f2a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f2e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    1f32:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1f3a:	8e 77       	andi	r24, 0x7E	; 126
    1f3c:	32 c0       	rjmp	.+100    	; 0x1fa2 <USB_Device_ProcessControlRequest+0x1c2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f3e:	28 2f       	mov	r18, r24
    1f40:	2d 7f       	andi	r18, 0xFD	; 253
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <USB_Device_ProcessControlRequest+0x166>
    1f44:	76 cf       	rjmp	.-276    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f46:	88 23       	and	r24, r24
    1f48:	e9 f0       	breq	.+58     	; 0x1f84 <USB_Device_ProcessControlRequest+0x1a4>
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <USB_Device_ProcessControlRequest+0x170>
    1f4e:	71 cf       	rjmp	.-286    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f50:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1f54:	81 11       	cpse	r24, r1
    1f56:	20 c0       	rjmp	.+64     	; 0x1f98 <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f58:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    1f5c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	28 0f       	add	r18, r24
    1f62:	26 30       	cpi	r18, 0x06	; 6
    1f64:	08 f0       	brcs	.+2      	; 0x1f68 <USB_Device_ProcessControlRequest+0x188>
    1f66:	65 cf       	rjmp	.-310    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f68:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f6c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f70:	20 ff       	sbrs	r18, 0
    1f72:	12 c0       	rjmp	.+36     	; 0x1f98 <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f74:	93 30       	cpi	r25, 0x03	; 3
    1f76:	c9 f4       	brne	.+50     	; 0x1faa <USB_Device_ProcessControlRequest+0x1ca>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f78:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f7c:	80 62       	ori	r24, 0x20	; 32

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f7e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1f82:	0a c0       	rjmp	.+20     	; 0x1f98 <USB_Device_ProcessControlRequest+0x1b8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f84:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <USB_Device_ProcessControlRequest+0x1ae>
    1f8c:	52 cf       	rjmp	.-348    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f8e:	93 30       	cpi	r25, 0x03	; 3
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <USB_Device_ProcessControlRequest+0x1b4>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_Device_RemoteWakeupEnabled>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f98:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1fa0:	87 7f       	andi	r24, 0xF7	; 247
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fa2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1fa6:	aa dd       	rcall	.-1196   	; 0x1afc <Endpoint_ClearStatusStage>
    1fa8:	44 cf       	rjmp	.-376    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1faa:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1fae:	90 61       	ori	r25, 0x10	; 16
    1fb0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0x1dc>
    1fba:	22 0f       	add	r18, r18
    1fbc:	8a 95       	dec	r24
    1fbe:	ea f7       	brpl	.-6      	; 0x1fba <USB_Device_ProcessControlRequest+0x1da>
    1fc0:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    1fc4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fc8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1fcc:	88 60       	ori	r24, 0x08	; 8
    1fce:	d7 cf       	rjmp	.-82     	; 0x1f7e <USB_Device_ProcessControlRequest+0x19e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	2f cf       	rjmp	.-418    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fd4:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1fd8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fda:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1fde:	80 78       	andi	r24, 0x80	; 128
    1fe0:	81 2b       	or	r24, r17
    1fe2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fe6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1fea:	87 7f       	andi	r24, 0xF7	; 247
    1fec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ff0:	85 dd       	rcall	.-1270   	; 0x1afc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ff2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    1ff6:	80 ff       	sbrs	r24, 0
    1ff8:	fc cf       	rjmp	.-8      	; 0x1ff2 <USB_Device_ProcessControlRequest+0x212>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ffa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1ffe:	80 68       	ori	r24, 0x80	; 128
    2000:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	11 11       	cpse	r17, r1
    2008:	01 c0       	rjmp	.+2      	; 0x200c <USB_Device_ProcessControlRequest+0x22c>
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
    2010:	10 cf       	rjmp	.-480    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2012:	c0 96       	adiw	r24, 0x30	; 48
    2014:	56 cf       	rjmp	.-340    	; 0x1ec2 <USB_Device_ProcessControlRequest+0xe2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2016:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    201a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <USB_ControlRequest+0x5>
    201e:	ae 01       	movw	r20, r28
    2020:	4f 5f       	subi	r20, 0xFF	; 255
    2022:	5f 4f       	sbci	r21, 0xFF	; 255
    2024:	9b db       	rcall	.-2250   	; 0x175c <CALLBACK_USB_GetDescriptor>
    2026:	bc 01       	movw	r22, r24
    2028:	89 2b       	or	r24, r25
    202a:	09 f4       	brne	.+2      	; 0x202e <USB_Device_ProcessControlRequest+0x24e>
    202c:	02 cf       	rjmp	.-508    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    202e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2032:	97 7f       	andi	r25, 0xF7	; 247
    2034:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	cb dc       	rcall	.-1642   	; 0x19d4 <Endpoint_Write_Control_PStream_LE>
    203e:	51 cf       	rjmp	.-350    	; 0x1ee2 <USB_Device_ProcessControlRequest+0x102>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2040:	80 38       	cpi	r24, 0x80	; 128
    2042:	09 f0       	breq	.+2      	; 0x2046 <USB_Device_ProcessControlRequest+0x266>
    2044:	f6 ce       	rjmp	.-532    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
    2046:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    204a:	87 7f       	andi	r24, 0xF7	; 247
    204c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2050:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2054:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2058:	6e cf       	rjmp	.-292    	; 0x1f36 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    205a:	81 11       	cpse	r24, r1
    205c:	ea ce       	rjmp	.-556    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    205e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    2062:	92 30       	cpi	r25, 0x02	; 2
    2064:	08 f0       	brcs	.+2      	; 0x2068 <USB_Device_ProcessControlRequest+0x288>
    2066:	e5 ce       	rjmp	.-566    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2068:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    206c:	87 7f       	andi	r24, 0xF7	; 247
    206e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2072:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2076:	42 dd       	rcall	.-1404   	; 0x1afc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2078:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
    207c:	88 23       	and	r24, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    207e:	29 f0       	breq	.+10     	; 0x208a <USB_Device_ProcessControlRequest+0x2aa>
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2086:	0b da       	rcall	.-3050   	; 0x149e <EVENT_USB_Device_ConfigurationChanged>
    2088:	d4 ce       	rjmp	.-600    	; 0x1e32 <USB_Device_ProcessControlRequest+0x52>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    208a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    208e:	87 fd       	sbrc	r24, 7
    2090:	f7 cf       	rjmp	.-18     	; 0x2080 <USB_Device_ProcessControlRequest+0x2a0>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	f6 cf       	rjmp	.-20     	; 0x2082 <USB_Device_ProcessControlRequest+0x2a2>

00002096 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2096:	08 95       	ret

00002098 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2098:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    209a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    209e:	88 23       	and	r24, r24
    20a0:	91 f0       	breq	.+36     	; 0x20c6 <USB_USBTask+0x2e>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20a2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    20a6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    20a8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    20ac:	80 fd       	sbrc	r24, 0
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <USB_USBTask+0x32>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20b2:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20b4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    20bc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    20be:	90 de       	rcall	.-736    	; 0x1de0 <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20c0:	cf 70       	andi	r28, 0x0F	; 15
    20c2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    20ca:	80 e8       	ldi	r24, 0x80	; 128
    20cc:	f2 cf       	rjmp	.-28     	; 0x20b2 <USB_USBTask+0x1a>

000020ce <__divmodhi4>:
    20ce:	97 fb       	bst	r25, 7
    20d0:	07 2e       	mov	r0, r23
    20d2:	16 f4       	brtc	.+4      	; 0x20d8 <__divmodhi4+0xa>
    20d4:	00 94       	com	r0
    20d6:	06 d0       	rcall	.+12     	; 0x20e4 <__divmodhi4_neg1>
    20d8:	77 fd       	sbrc	r23, 7
    20da:	08 d0       	rcall	.+16     	; 0x20ec <__divmodhi4_neg2>
    20dc:	0b d0       	rcall	.+22     	; 0x20f4 <__udivmodhi4>
    20de:	07 fc       	sbrc	r0, 7
    20e0:	05 d0       	rcall	.+10     	; 0x20ec <__divmodhi4_neg2>
    20e2:	3e f4       	brtc	.+14     	; 0x20f2 <__divmodhi4_exit>

000020e4 <__divmodhi4_neg1>:
    20e4:	90 95       	com	r25
    20e6:	81 95       	neg	r24
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__divmodhi4_neg2>:
    20ec:	70 95       	com	r23
    20ee:	61 95       	neg	r22
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255

000020f2 <__divmodhi4_exit>:
    20f2:	08 95       	ret

000020f4 <__udivmodhi4>:
    20f4:	aa 1b       	sub	r26, r26
    20f6:	bb 1b       	sub	r27, r27
    20f8:	51 e1       	ldi	r21, 0x11	; 17
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <__udivmodhi4_ep>

000020fc <__udivmodhi4_loop>:
    20fc:	aa 1f       	adc	r26, r26
    20fe:	bb 1f       	adc	r27, r27
    2100:	a6 17       	cp	r26, r22
    2102:	b7 07       	cpc	r27, r23
    2104:	10 f0       	brcs	.+4      	; 0x210a <__udivmodhi4_ep>
    2106:	a6 1b       	sub	r26, r22
    2108:	b7 0b       	sbc	r27, r23

0000210a <__udivmodhi4_ep>:
    210a:	88 1f       	adc	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	5a 95       	dec	r21
    2110:	a9 f7       	brne	.-22     	; 0x20fc <__udivmodhi4_loop>
    2112:	80 95       	com	r24
    2114:	90 95       	com	r25
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	08 95       	ret

0000211c <_exit>:
    211c:	f8 94       	cli

0000211e <__stop_program>:
    211e:	ff cf       	rjmp	.-2      	; 0x211e <__stop_program>
